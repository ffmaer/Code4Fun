import java.util.HashMap;

//https://code.google.com/codejam/contest/189252/dashboard#s=p0
public class Main {
	public static void main(String args[]) {
		// find the number of different characters
		// convert the string from highest digit
		// calculate the value of the new string

	}

	public static int base(String input) {
		// input: 11001001
		HashMap<String, Integer> map = new HashMap<String, Integer>();

		for (int i = 0; i < input.length(); i++) {
			String s = input.charAt(i) + "";
			if (!map.containsKey(s)) {
				// char to String
				map.put(s, new Integer(1));
			}
		}
		return map.size();
	}

	public static String covert(String input) {
		// cats
		// base = 4
		// 1023
		// 3 + 2*4 + 0 * 4^2 +1 * 4^3 = 64 + 8 + 3 = 75
		// covert the highest digit to 1
		// find the next digit that hasn't been converted yet
		// convert that to 0
		// convert the next digit to 2, 3
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		String output = "";
		Integer toDigit = 1;
		for (int i = 0; i < input.length(); i++) {
			String s = input.charAt(i) + "";
			if (map.containsKey(s)) {
				output = output + map.get(s);
			} else {
				map.put(s, toDigit);
				output = output + map.get(s);
				if (toDigit.equals(1)) {
					toDigit = 0;
				} else if (toDigit.equals(0)) {
					toDigit = 2;
				} else {
					toDigit++;
				}
			}
		}
		return output;
	}

	public static int calculate(String input, int base) {
		int power = 0;
		int sum = 0;
		for (int i = input.length(); i >= 0; i--) {
			Integer digit = Integer.parseInt(input.charAt(i) + "");
			sum = sum + digit * Math.pow(base, power);
		}
		return sum;
	}

}
